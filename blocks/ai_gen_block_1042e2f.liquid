{% doc %}
  @prompt
    Collection list: Carousel liquid section with preset

{% enddoc %}
{% assign ai_gen_id = block.id | replace: '_', '' | downcase %}

{% style %}
  .ai-collection-carousel-{{ ai_gen_id }} {
    position: relative;
    overflow: hidden;
    padding: {{ block.settings.section_padding }}px 0;
  }

  .ai-collection-carousel__header-{{ ai_gen_id }} {
    text-align: {{ block.settings.text_alignment }};
    margin-bottom: {{ block.settings.header_spacing }}px;
  }

  .ai-collection-carousel__title-{{ ai_gen_id }} {
    color: {{ block.settings.title_color }};
    font-size: {{ block.settings.title_size }}px;
    margin: 0 0 8px 0;
  }

  .ai-collection-carousel__subtitle-{{ ai_gen_id }} {
    color: {{ block.settings.subtitle_color }};
    font-size: {{ block.settings.subtitle_size }}px;
    margin: 0;
  }

  .ai-collection-carousel__container-{{ ai_gen_id }} {
    position: relative;
  }

  .ai-collection-carousel__track-{{ ai_gen_id }} {
    display: flex;
    gap: {{ block.settings.card_spacing }}px;
    transition: transform 0.3s ease;
    overflow-x: auto;
    scroll-snap-type: x mandatory;
    scrollbar-width: none;
    -ms-overflow-style: none;
  }

  .ai-collection-carousel__track-{{ ai_gen_id }}::-webkit-scrollbar {
    display: none;
  }

  .ai-collection-carousel__card-{{ ai_gen_id }} {
    flex: 0 0 {{ block.settings.card_width }}px;
    scroll-snap-align: start;
    background-color: {{ block.settings.card_background }};
    border-radius: {{ block.settings.card_border_radius }}px;
    overflow: hidden;
    transition: transform 0.3s ease, box-shadow 0.3s ease;
    text-decoration: none;
    color: inherit;
  }

  .ai-collection-carousel__card-{{ ai_gen_id }}:hover {
    transform: translateY(-4px);
    box-shadow: 0 8px 24px rgba(0, 0, 0, 0.15);
  }

  .ai-collection-carousel__image-wrapper-{{ ai_gen_id }} {
    position: relative;
    width: 100%;
    height: {{ block.settings.image_height }}px;
    overflow: hidden;
  }

  .ai-collection-carousel__image-{{ ai_gen_id }} {
    width: 100%;
    height: 100%;
    object-fit: cover;
    transition: transform 0.3s ease;
  }

  .ai-collection-carousel__card-{{ ai_gen_id }}:hover .ai-collection-carousel__image-{{ ai_gen_id }} {
    transform: scale(1.05);
  }

  .ai-collection-carousel__image-placeholder-{{ ai_gen_id }} {
    width: 100%;
    height: 100%;
    background-color: #f4f4f4;
    display: flex;
    align-items: center;
    justify-content: center;
    position: relative;
  }

  .ai-collection-carousel__image-placeholder-{{ ai_gen_id }} svg {
    width: 60%;
    height: 60%;
    opacity: 0.3;
  }

  .ai-collection-carousel__card-content-{{ ai_gen_id }} {
    padding: {{ block.settings.card_padding }}px;
  }

  .ai-collection-carousel__card-title-{{ ai_gen_id }} {
    color: {{ block.settings.card_title_color }};
    font-size: {{ block.settings.card_title_size }}px;
    font-weight: 600;
    margin: 0 0 8px 0;
    line-height: 1.3;
  }

  .ai-collection-carousel__card-description-{{ ai_gen_id }} {
    color: {{ block.settings.card_text_color }};
    font-size: {{ block.settings.card_text_size }}px;
    line-height: 1.4;
    margin: 0;
  }

  .ai-collection-carousel__product-count-{{ ai_gen_id }} {
    color: {{ block.settings.card_text_color }};
    font-size: {{ block.settings.card_text_size | minus: 2 }}px;
    opacity: 0.7;
    margin-top: 8px;
  }

  .ai-collection-carousel__navigation-{{ ai_gen_id }} {
    display: flex;
    justify-content: center;
    align-items: center;
    gap: 16px;
    margin-top: {{ block.settings.navigation_spacing }}px;
  }

  .ai-collection-carousel__nav-button-{{ ai_gen_id }} {
    width: 44px;
    height: 44px;
    border-radius: 50%;
    background-color: {{ block.settings.nav_button_color }};
    border: none;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    transition: all 0.3s ease;
    color: {{ block.settings.nav_button_icon_color }};
  }

  .ai-collection-carousel__nav-button-{{ ai_gen_id }}:hover {
    background-color: {{ block.settings.nav_button_hover_color }};
    transform: scale(1.1);
  }

  .ai-collection-carousel__nav-button-{{ ai_gen_id }}:disabled {
    opacity: 0.4;
    cursor: not-allowed;
    transform: none;
  }

  .ai-collection-carousel__dots-{{ ai_gen_id }} {
    display: flex;
    gap: 8px;
  }

  .ai-collection-carousel__dot-{{ ai_gen_id }} {
    width: 8px;
    height: 8px;
    border-radius: 50%;
    background-color: {{ block.settings.dot_color }};
    border: none;
    cursor: pointer;
    transition: all 0.3s ease;
    opacity: 0.4;
  }

  .ai-collection-carousel__dot-{{ ai_gen_id }}.active {
    opacity: 1;
    background-color: {{ block.settings.dot_active_color }};
  }

  .ai-collection-carousel__empty-state-{{ ai_gen_id }} {
    text-align: center;
    padding: 60px 20px;
    color: #666;
  }

  .ai-collection-carousel__empty-title-{{ ai_gen_id }} {
    font-size: 18px;
    margin: 0 0 8px 0;
  }

  .ai-collection-carousel__empty-text-{{ ai_gen_id }} {
    font-size: 14px;
    opacity: 0.8;
  }

  @media screen and (max-width: 768px) {
    .ai-collection-carousel__card-{{ ai_gen_id }} {
      flex: 0 0 {{ block.settings.card_width | times: 0.8 }}px;
    }

    .ai-collection-carousel__track-{{ ai_gen_id }} {
      gap: {{ block.settings.card_spacing | divided_by: 2 }}px;
    }
  }

  @media screen and (max-width: 480px) {
    .ai-collection-carousel__card-{{ ai_gen_id }} {
      flex: 0 0 {{ block.settings.card_width | times: 0.7 }}px;
    }
  }
{% endstyle %}

<collection-carousel-{{ ai_gen_id }}
  class="ai-collection-carousel-{{ ai_gen_id }}"
  {{ block.shopify_attributes }}
>
  {% if block.settings.title != blank or block.settings.subtitle != blank %}
    <div class="ai-collection-carousel__header-{{ ai_gen_id }}">
      {% if block.settings.title != blank %}
        <h2 class="ai-collection-carousel__title-{{ ai_gen_id }}">{{ block.settings.title }}</h2>
      {% endif %}
      {% if block.settings.subtitle != blank %}
        <p class="ai-collection-carousel__subtitle-{{ ai_gen_id }}">{{ block.settings.subtitle }}</p>
      {% endif %}
    </div>
  {% endif %}

  {% if block.settings.collections != blank and block.settings.collections.size > 0 %}
    <div class="ai-collection-carousel__container-{{ ai_gen_id }}">
      <div class="ai-collection-carousel__track-{{ ai_gen_id }}" data-track>
        {% for collection in block.settings.collections %}
          <a
            href="{{ collection.url }}"
            class="ai-collection-carousel__card-{{ ai_gen_id }}"
          >
            <div class="ai-collection-carousel__image-wrapper-{{ ai_gen_id }}">
              {% if collection.featured_image %}
                <img
                  src="{{ collection.featured_image | image_url: width: 400 }}"
                  alt="{{ collection.featured_image.alt | escape }}"
                  class="ai-collection-carousel__image-{{ ai_gen_id }}"
                  loading="lazy"
                  width="400"
                  height="{{ block.settings.image_height }}"
                >
              {% else %}
                <div class="ai-collection-carousel__image-placeholder-{{ ai_gen_id }}">
                  {{ 'collection-1' | placeholder_svg_tag }}
                </div>
              {% endif %}
            </div>
            <div class="ai-collection-carousel__card-content-{{ ai_gen_id }}">
              <h3 class="ai-collection-carousel__card-title-{{ ai_gen_id }}">{{ collection.title }}</h3>
              {% if block.settings.show_description and collection.description != blank %}
                <p class="ai-collection-carousel__card-description-{{ ai_gen_id }}">
                  {{ collection.description | strip_html | truncate: 100 }}
                </p>
              {% endif %}
              {% if block.settings.show_product_count %}
                <div class="ai-collection-carousel__product-count-{{ ai_gen_id }}">
                  {{ collection.products_count }}
                  {% if collection.products_count == 1 %}
                    product
                  {% else %}
                    products
                  {% endif %}
                </div>
              {% endif %}
            </div>
          </a>
        {% endfor %}
      </div>

      {% if block.settings.show_navigation %}
        <div class="ai-collection-carousel__navigation-{{ ai_gen_id }}">
          <button
            class="ai-collection-carousel__nav-button-{{ ai_gen_id }}"
            data-prev
            aria-label="Previous collections"
          >
            <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
              <polyline points="15,18 9,12 15,6"></polyline>
            </svg>
          </button>

          <div class="ai-collection-carousel__dots-{{ ai_gen_id }}" data-dots></div>

          <button
            class="ai-collection-carousel__nav-button-{{ ai_gen_id }}"
            data-next
            aria-label="Next collections"
          >
            <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
              <polyline points="9,18 15,12 9,6"></polyline>
            </svg>
          </button>
        </div>
      {% endif %}
    </div>
  {% else %}
    <div class="ai-collection-carousel__empty-state-{{ ai_gen_id }}">
      <h3 class="ai-collection-carousel__empty-title-{{ ai_gen_id }}">No collections selected</h3>
      <p class="ai-collection-carousel__empty-text-{{ ai_gen_id }}">Choose collections to display in this carousel</p>
    </div>
  {% endif %}
</collection-carousel-{{ ai_gen_id }}>

<script>
  (function() {
    class CollectionCarousel{{ ai_gen_id }} extends HTMLElement {
      constructor() {
        super();
        this.currentIndex = 0;
        this.itemsPerView = 1;
        this.totalItems = 0;
      }

      connectedCallback() {
        this.track = this.querySelector('[data-track]');
        this.prevButton = this.querySelector('[data-prev]');
        this.nextButton = this.querySelector('[data-next]');
        this.dotsContainer = this.querySelector('[data-dots]');

        if (!this.track) return;

        this.cards = this.track.querySelectorAll('.ai-collection-carousel__card-{{ ai_gen_id }}');
        this.totalItems = this.cards.length;

        if (this.totalItems === 0) return;

        this.calculateItemsPerView();
        this.createDots();
        this.setupEventListeners();
        this.updateNavigation();

        window.addEventListener('resize', () => {
          this.calculateItemsPerView();
          this.createDots();
          this.updateNavigation();
        });
      }

      calculateItemsPerView() {
        if (this.cards.length === 0) return;

        const containerWidth = this.track.offsetWidth;
        const cardWidth = this.cards[0].offsetWidth;
        const gap = parseInt(getComputedStyle(this.track).gap) || 0;

        this.itemsPerView = Math.floor((containerWidth + gap) / (cardWidth + gap));
        this.itemsPerView = Math.max(1, this.itemsPerView);
      }

      createDots() {
        if (!this.dotsContainer) return;

        this.dotsContainer.innerHTML = '';
        const totalPages = Math.ceil(this.totalItems / this.itemsPerView);

        for (let i = 0; i < totalPages; i++) {
          const dot = document.createElement('button');
          dot.className = `ai-collection-carousel__dot-{{ ai_gen_id }}`;
          dot.setAttribute('data-index', i);
          dot.setAttribute('aria-label', `Go to slide ${i + 1}`);
          
          if (i === 0) {
            dot.classList.add('active');
          }

          dot.addEventListener('click', () => {
            this.goToSlide(i);
          });

          this.dotsContainer.appendChild(dot);
        }
      }

      setupEventListeners() {
        if (this.prevButton) {
          this.prevButton.addEventListener('click', () => {
            this.previousSlide();
          });
        }

        if (this.nextButton) {
          this.nextButton.addEventListener('click', () => {
            this.nextSlide();
          });
        }

        this.track.addEventListener('scroll', () => {
          this.updateDotsFromScroll();
        });
      }

      goToSlide(index) {
        const maxIndex = Math.ceil(this.totalItems / this.itemsPerView) - 1;
        this.currentIndex = Math.max(0, Math.min(index, maxIndex));

        const cardWidth = this.cards[0].offsetWidth;
        const gap = parseInt(getComputedStyle(this.track).gap) || 0;
        const scrollPosition = this.currentIndex * this.itemsPerView * (cardWidth + gap);

        this.track.scrollTo({
          left: scrollPosition,
          behavior: 'smooth'
        });

        this.updateNavigation();
      }

      previousSlide() {
        this.goToSlide(this.currentIndex - 1);
      }

      nextSlide() {
        this.goToSlide(this.currentIndex + 1);
      }

      updateDotsFromScroll() {
        const cardWidth = this.cards[0].offsetWidth;
        const gap = parseInt(getComputedStyle(this.track).gap) || 0;
        const scrollPosition = this.track.scrollLeft;
        const slideWidth = this.itemsPerView * (cardWidth + gap);
        const newIndex = Math.round(scrollPosition / slideWidth);

        if (newIndex !== this.currentIndex) {
          this.currentIndex = newIndex;
          this.updateNavigation();
        }
      }

      updateNavigation() {
        const maxIndex = Math.ceil(this.totalItems / this.itemsPerView) - 1;

        if (this.prevButton) {
          this.prevButton.disabled = this.currentIndex === 0;
        }

        if (this.nextButton) {
          this.nextButton.disabled = this.currentIndex >= maxIndex;
        }

        if (this.dotsContainer) {
          const dots = this.dotsContainer.querySelectorAll('.ai-collection-carousel__dot-{{ ai_gen_id }}');
          dots.forEach((dot, index) => {
            dot.classList.toggle('active', index === this.currentIndex);
          });
        }
      }
    }

    customElements.define('collection-carousel-{{ ai_gen_id }}', CollectionCarousel{{ ai_gen_id }});
  })();
</script>

{% schema %}
{
  "name": " carousel Collection",
  "settings": [
    {
      "type": "header",
      "content": "Content"
    },
    {
      "type": "text",
      "id": "title",
      "label": "Heading",
      "default": "Shop by collection"
    },
    {
      "type": "text",
      "id": "subtitle",
      "label": "Subheading"
    },
    {
      "type": "collection_list",
      "id": "collections",
      "label": "Collections",
      "limit": 12
    },
    {
      "type": "checkbox",
      "id": "show_description",
      "label": "Show collection descriptions",
      "default": true
    },
    {
      "type": "checkbox",
      "id": "show_product_count",
      "label": "Show product count",
      "default": true
    },
    {
      "type": "header",
      "content": "Layout"
    },
    {
      "type": "select",
      "id": "text_alignment",
      "label": "Text alignment",
      "options": [
        {
          "value": "left",
          "label": "Left"
        },
        {
          "value": "center",
          "label": "Center"
        },
        {
          "value": "right",
          "label": "Right"
        }
      ],
      "default": "center"
    },
    {
      "type": "range",
      "id": "card_width",
      "min": 200,
      "max": 400,
      "step": 20,
      "unit": "px",
      "label": "Card width",
      "default": 280
    },
    {
      "type": "range",
      "id": "image_height",
      "min": 150,
      "max": 300,
      "step": 10,
      "unit": "px",
      "label": "Image height",
      "default": 200
    },
    {
      "type": "range",
      "id": "card_spacing",
      "min": 8,
      "max": 40,
      "step": 4,
      "unit": "px",
      "label": "Card spacing",
      "default": 16
    },
    {
      "type": "range",
      "id": "card_padding",
      "min": 8,
      "max": 32,
      "step": 4,
      "unit": "px",
      "label": "Card padding",
      "default": 16
    },
    {
      "type": "range",
      "id": "card_border_radius",
      "min": 0,
      "max": 24,
      "step": 2,
      "unit": "px",
      "label": "Card border radius",
      "default": 8
    },
    {
      "type": "header",
      "content": "Navigation"
    },
    {
      "type": "checkbox",
      "id": "show_navigation",
      "label": "Show navigation",
      "default": true
    },
    {
      "type": "range",
      "id": "navigation_spacing",
      "min": 16,
      "max": 48,
      "step": 4,
      "unit": "px",
      "label": "Navigation spacing",
      "default": 24
    },
    {
      "type": "header",
      "content": "Spacing"
    },
    {
      "type": "range",
      "id": "section_padding",
      "min": 0,
      "max": 80,
      "step": 4,
      "unit": "px",
      "label": "Section padding",
      "default": 40
    },
    {
      "type": "range",
      "id": "header_spacing",
      "min": 16,
      "max": 48,
      "step": 4,
      "unit": "px",
      "label": "Header spacing",
      "default": 32
    },
    {
      "type": "header",
      "content": "Colors"
    },
    {
      "type": "color",
      "id": "title_color",
      "label": "Title color",
      "default": "#000000"
    },
    {
      "type": "color",
      "id": "subtitle_color",
      "label": "Subtitle color",
      "default": "#666666"
    },
    {
      "type": "color",
      "id": "card_background",
      "label": "Card background",
      "default": "#ffffff"
    },
    {
      "type": "color",
      "id": "card_title_color",
      "label": "Card title color",
      "default": "#000000"
    },
    {
      "type": "color",
      "id": "card_text_color",
      "label": "Card text color",
      "default": "#666666"
    },
    {
      "type": "color",
      "id": "nav_button_color",
      "label": "Navigation button color",
      "default": "#ffffff"
    },
    {
      "type": "color",
      "id": "nav_button_hover_color",
      "label": "Navigation button hover color",
      "default": "#f5f5f5"
    },
    {
      "type": "color",
      "id": "nav_button_icon_color",
      "label": "Navigation icon color",
      "default": "#000000"
    },
    {
      "type": "color",
      "id": "dot_color",
      "label": "Dot color",
      "default": "#cccccc"
    },
    {
      "type": "color",
      "id": "dot_active_color",
      "label": "Active dot color",
      "default": "#000000"
    },
    {
      "type": "header",
      "content": "Typography"
    },
    {
      "type": "range",
      "id": "title_size",
      "min": 16,
      "max": 48,
      "step": 2,
      "unit": "px",
      "label": "Title size",
      "default": 32
    },
    {
      "type": "range",
      "id": "subtitle_size",
      "min": 12,
      "max": 24,
      "step": 1,
      "unit": "px",
      "label": "Subtitle size",
      "default": 16
    },
    {
      "type": "range",
      "id": "card_title_size",
      "min": 14,
      "max": 24,
      "step": 1,
      "unit": "px",
      "label": "Card title size",
      "default": 18
    },
    {
      "type": "range",
      "id": "card_text_size",
      "min": 12,
      "max": 18,
      "step": 1,
      "unit": "px",
      "label": "Card text size",
      "default": 14
    }
  ],
  "presets": [
    {
      "name": "carousel Collection "
    }
  ]
}
{% endschema %}